(*qualif Inv(res) : forall (u v ). ((-.link (res, black, 0, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res, black, 2, u, v)) or  u < v)
qualif Inv(res) : forall (u v ). ((-.link (res, black, 20, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res, red, 0, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res, red, 2, u, v)) or  u < v)
qualif Inv(res) : forall (u v ). ((-.link (res, red, 20, u, v)) or  u > v) 
qualif Inv(res) : forall (u v ). ((-.link (res.0, black, 0, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res.0, black, 2, u, v)) or  u < v)
qualif Inv(res) : forall (u v ). ((-.link (res.0, black, 20, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res.0, red, 0, u, v)) or  u > v)
qualif Inv(res) : forall (u v ). ((-.link (res.0, red, 2, u, v)) or  u < v)
qualif Inv(res) : forall (u v ). ((-.link (res.0, red, 20, u, v)) or  u > v) 

qualif Inv(res) : forall (u ). (-.reach (res, u) or u < x2)
qualif Inv(res) : forall (u ). (-.reach (res, u) or u > x2)


qualif Inv(res) : forall (u ). (((-.((reach (tt, u)) and (-. (u = z)))) or  (reach (res.0, u))) and ((-. (reach (res.0, u))) or ((reach (tt, u)) and (-. (u = z)))))

qualif Inv(res) : forall (u ). (((-. (reach (tt, u))) or ((reach (res.0, u)) or (u = res.1))) and ((-.((reach (res.0, u)) or (u = res.1))) or  (reach (tt, u))))

qualif Inv(res) : forall (u ). (((-. (reach (ult, u))) or (reach (res.0, u))) and ((-. (reach (res.0, u))) or (reach (ult, u))))

qualif Inv(res) : forall (u ). (((-. (reach (urt, u))) or (reach (res.0, u))) and ((-. (reach (res.0, u))) or (reach (urt, u))))


qualif Inv(res) : forall (u ). (((-. (((reach (x3, u)) or (u = x2)) or  (reach (x1, u)))) or  (reach (res, u))) and ((-. (reach (res, u))) or (reach (x1, u)) or (reach (x3, u)) or (u = x2)))

*)
