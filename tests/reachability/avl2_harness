let uniques n = 
	let rec loop i ns = 
		if i >= n then ns
		else
			let v = Random.int 1000 in
			if (List.exists (fun n -> n = v) ns) then
				loop i ns
			else loop (i+1) (v::ns) in
	loop 0 [] 

let main () =		 
	let ns = uniques 20 in	
	let t = Leaf in	
	let t = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		insert t k
		) t ns in
	let ns' = uniques 20 in	
	let t' = Leaf in	
	let t' = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		insert t k
		) t' ns' in
	let ns1 = uniques 20 in	
	let t1 = Leaf in	
	let t1 = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		insert t k
		) t1 ns1 in
	let ns2 = uniques 20 in	
	let t2 = Leaf in	
	let t2 = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		insert t k
		) t2 ns2 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = member 1000 t in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = member 20 t in	
	let _ = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		delete k t
		) t ns in
	let _ = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		delete k t
		) t' ns' in	
	let _ = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		delete k t
		) t1 ns1 in	
	let _ = List.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		delete k t
		) t2 ns2 in	
	()
let _ = main () 