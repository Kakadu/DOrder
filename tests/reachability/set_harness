let create lowerbound number = 
	let ns = Array.init number (fun _ -> lowerbound + Random.int number) in
	let t = Empty in	
	let t = Array.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		add k t
		) t ns in
	(t, ns)
	
let destory t ns = 
	Array.fold_left (fun t k -> 
		let _ = fprintf outch "env:newtest\t\n" in
		remove k t
		) t ns
	
let main () =	
	(*let ns1 = [|19;13;12;16;6;9;22;5;25;4;15;18;24;11;20;8;1;14;21;2;7;10;3;17;23|] in	*)
	let (t1, ns1) = create 5 15 in
	let (t2, ns2) = create 5 15 in
	
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = union t1 t2 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = diff t1 t2 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = inter t1 t2 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = subset t1 t2 in
	
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = elements t1 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = mem 10 t1 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = mem 50 t1 in
	
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = filter (fun _ -> Random.bool ()) t1 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = partition (fun _ -> Random.bool ()) t1 in
	
	
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = max_elt true t1 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = min_elt true t2 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = cardinal true t1 in
	
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = destory t1 ns1 in
	let _ = fprintf outch "env:newtest\t\n" in
	let _ = destory t2 ns2 in
	()
let _ = main () 